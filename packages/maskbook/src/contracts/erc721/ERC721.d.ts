/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from 'bn.js'
import { Contract, ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import { ContractEvent, Callback, TransactionObject, BlockType } from '../types'

interface EventOptions {
    filter?: object
    fromBlock?: BlockType
    topics?: string[]
}

export class Erc721 extends Contract {
    constructor(jsonInterface: any[], address?: string, options?: ContractOptions)
    clone(): Erc721
    methods: {
        approve(to: string, tokenId: number | string): TransactionObject<void>

        mint(to: string, tokenId: number | string): TransactionObject<void>

        safeTransferFrom(from: string, to: string, tokenId: number | string): TransactionObject<void>

        setApprovalForAll(to: string, approved: boolean): TransactionObject<void>

        transferFrom(from: string, to: string, tokenId: number | string): TransactionObject<void>

        balanceOf(owner: string): TransactionObject<string>

        getApproved(tokenId: number | string): TransactionObject<string>

        isApprovedForAll(owner: string, operator: string): TransactionObject<boolean>

        ownerOf(tokenId: number | string): TransactionObject<string>

        supportsInterface(interfaceId: string | number[]): TransactionObject<boolean>
    }
    events: {
        Transfer: ContractEvent<{
            from: string
            to: string
            tokenId: string
            0: string
            1: string
            2: string
        }>
        Approval: ContractEvent<{
            owner: string
            approved: string
            tokenId: string
            0: string
            1: string
            2: string
        }>
        ApprovalForAll: ContractEvent<{
            owner: string
            operator: string
            approved: boolean
            0: string
            1: string
            2: boolean
        }>
        allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter
    }
}
